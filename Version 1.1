from collections import Counter
import random

num_dice = 5
turn = 0
round = 1
min = 1
max = 6
roll = "y"
NUMERAL_LIST = [range(min, max)]

current_hand = []
opponent_hand = []
my_score = 0
opp_score = 0
my_rounds = 0
opp_rounds = 0

while turn < 2 and my_rounds < 2 and opp_rounds < 2 and roll.lower() == "y":
    current_hand = []
    for i in range(num_dice):
        i = current_hand.append(random.randint(min, max))
        current_hand.sort()
    turn = turn + 1
    roll = ""
    print("You rolled: ", current_hand)

if turn < 2 and opp_score <= my_score:
    opponent_hand = []
    for i in range(num_dice):
        i = opponent_hand.append(random.randint(min, max))
        opponent_hand.sort()
    print('Your opponent rolled: ', opponent_hand)

def again(z):
    print(z)
    i = 0
    while i <= 4:
        try:
            n = i + 1
            print("Dice Number # : ", n)
            change = str(input("Would you like to reroll this die? y/n: "))
            if change == "Y" or change == "y":
                z[i] = random.randint(min, max)
                i += 1
            elif change == "N" or change == "n":
                i += 1
            elif change != "Y" or change != "y":
                raise IOError
        except IOError:
            print("You did not enter y or n.")
    return z

z = current_hand
again(z)

print("You rolled: ", current_hand)

current_hand = Counter(current_hand)
opponent_hand = Counter(opponent_hand)

def my_scoring():
    score = 0
    for key in current_hand:
        if key == 6:
            score = score + (key * current_hand[key])
        elif key == 5:
            score = score + (key * current_hand[key])
        elif key == 4:
            score = score + (key * current_hand[key])
        elif key == 3:
            score = score + (key * current_hand[key])
        elif key == 2:
            score = score + (key * current_hand[key])
        elif key == 1:
            score = score + (key * current_hand[key])
    if 4 in current_hand.values(): # Four of a Kind
        score = score + 2560
    elif 3 in current_hand.values() and 2 in current_hand.values(): # Full House (still need to account for higher hand if both players have a Full House.
        score = score + 1280
    elif (1 in current_hand and 2 in current_hand and 3 in current_hand and 4 in current_hand and 5 in current_hand) \
            or (2 in current_hand and 3 in current_hand and 4 in current_hand and 5 in current_hand and 6 in current_hand):
            score = score + 640
    elif 3 in current_hand.values(): # Three of a Kind
        score = score + 320
    elif 2 in current_hand.values(): # Pair or Two Pair
        for value in current_hand.values():
            if value == 2:
                score = score + 80
    return score

def opp_scoring():
    score = 0
    for key in opponent_hand:
        if key == 6:
            score = score + (key * opponent_hand[key])
        elif key == 5:
            score = score + (key * opponent_hand[key])
        elif key == 4:
            score = score + (key * opponent_hand[key])
        elif key == 3:
            score = score + (key * opponent_hand[key])
        elif key == 2:
            score = score + (key * opponent_hand[key])
        elif key == 1:
            score = score + (key * opponent_hand[key])
    if 5 in opponent_hand.values():  # Five of a Kind
        score = score + 2560
    if 4 in opponent_hand.values(): # Four of a Kind
        score = score + 2560
    elif 3 in opponent_hand.values() and 2 in opponent_hand.values(): # Full House (still need to account for higher hand if both players have a Full House.
        score = score + 1280
    elif (1 in opponent_hand and 2 in opponent_hand and 3 in opponent_hand and 4 in opponent_hand and 5 in opponent_hand) \
            or (2 in opponent_hand and 3 in opponent_hand and 4 in opponent_hand and 5 in opponent_hand and 6 in opponent_hand):
            score = score + 640
    elif 3 in opponent_hand.values(): # Three of a Kind
        score = score + 320
    elif 2 in opponent_hand.values(): # Pair or Two Pair
        for value in opponent_hand.values():
            if value == 2:
                score = score + 80
    return score

my_score = my_scoring()
print(my_score)
opp_score = opp_scoring()
print(opp_score)

def winner():
    if my_score > opp_score:
        global my_rounds
        print("You win!")
        my_rounds = my_rounds + 1
        global round
        round = round + 1
    elif my_score == opp_score:
        print("It's a tie.  Starting next round.")
    else:
        global opp_rounds
        print("You lose!")
        opp_rounds = opp_rounds + 1
        round = round + 1
    print("The score is " + str(my_rounds) + " to ", str(opp_rounds))

winner()
print("Round number: ", round)

turn = 0
current_hand = []
opponent_hand = []
roll = "y"

while turn < 2 and my_rounds < 2 and opp_rounds < 2 and roll.lower() == "y":
    current_hand = []
    for i in range(num_dice):
        i = current_hand.append(random.randint(min, max))
        current_hand.sort()
    turn = turn + 1
    roll = ""
    print("You rolled: ", current_hand)

if turn < 2 and opp_score <= my_score:
    opponent_hand = []
    for i in range(num_dice):
        i = opponent_hand.append(random.randint(min, max))
        opponent_hand.sort()
    print('Your opponent rolled: ', opponent_hand)

z = current_hand
again(z)

print("You rolled: ", current_hand)

current_hand = Counter(current_hand)
opponent_hand = Counter(opponent_hand)

my_score = my_scoring()
print(my_score)
opp_score = opp_scoring()
print(opp_score)

winner()
print("Round number: ", round)
